// Generated by CoffeeScript 1.7.1
'use strict';
StatisticsFriendsModule.controller('StatisticsFriendsController', function($scope, $stateParams, $state, $location, $timeout, RestModel, Loader, params, currentUser, friends) {
  $scope.params = params;
  $scope.currentUser = currentUser.response[0];
  $scope.friends = friends.response.items;
  $scope.offset = 0;
  $scope.selectedStat = true;
  $scope.home = function() {
    return $state.transitionTo('friends');
  };
  $scope.choosing = function() {
    return $scope.selectedStat = true;
  };
  $scope.getStatisticAboutFriends = function() {
    var statisticFriends;
    if (!$scope.resultFriends) {
      $scope.resultFriends = [];
      statisticFriends = RestModel.friendsOnlineOrDelete(null, $scope.friends);
      $scope.getListCountFriends(statisticFriends);
      return $scope.loading = true;
    } else {
      $scope.selectedStat = false;
      $scope.firstStat = true;
      return $scope.secondStat = false;
    }
  };
  $scope.getListCountFriends = function(friends) {
    var tempFriendsArray;
    if (friends.length > 25) {
      tempFriendsArray = friends.splice(0, 25);
      return $timeout(function() {
        return RestModel.getAllCountFriends(tempFriendsArray, $scope.params).then(function(data) {
          angular.forEach(data.response, function(user) {
            return $scope.resultFriends.push(user[0]);
          });
          return $scope.getListCountFriends(friends);
        }, function(error) {
          return console.log(error);
        });
      }, 330);
    } else {
      if (friends.length !== 0) {
        return $timeout(function() {
          return RestModel.getAllCountFriends(friends, $scope.params).then(function(data) {
            angular.forEach(data.response, function(user) {
              return $scope.resultFriends.push(user[0]);
            });
            $scope.loading = false;
            $scope.selectedStat = false;
            $scope.firstStat = true;
            $scope.resultFriends = $scope.resultFriends.sort($scope.sortable);
            return $scope.resultFriends = Loader.renderBand($scope.resultFriends);
          });
        }, 330);
      } else {
        return console.log('dct');
      }
    }
  };
  $scope.sortable = function(a, b) {
    return b.counters.friends - a.counters.friends;
  };
  $scope.getStatActiveUser = function() {
    var statisticFriends;
    $scope.userPhotos = [];
    $scope.userLikes = [];
    if (!$scope.resultStatSecond) {
      $scope.resultStatSecond = [];
      $scope.arrayIdFriends = {};
      statisticFriends = RestModel.friendsOnlineOrDelete(null, $scope.friends);
      angular.forEach(statisticFriends, function(user) {
        $scope.arrayIdFriends[user.id] = user;
        return $scope.arrayIdFriends[user.id].count = 0;
      });
      $scope.getActiveScan($scope.currentUser.counters.photos);
      return $scope.loading = true;
    } else {
      $scope.selectedStat = false;
      $scope.firstStat = false;
      return $scope.secondStat = true;
    }
  };
  $scope.getActiveScan = function(count) {
    if (count < 200) {
      return $timeout(function() {
        return RestModel.getPhotoAll($scope.currentUser.id, $scope.params, 200).then(function(data) {
          $scope.offset = 0;
          if (angular.isDefined(data.response && data.response.items)) {
            $scope.userPhotos.push(data.response.items);
            $scope.userPhotos = $scope.getArrayPhoto($scope.userPhotos);
            return $scope.getLikes($scope.userPhotos);
          }
        }, function(error) {
          return console.log(error);
        });
      }, 300);
    } else {
      return $timeout(function() {
        return RestModel.getPhotoAll($scope.currentUser.id, $scope.params, 200, $scope.offset).then(function(data) {
          if (angular.isDefined(data.response && data.response.items)) {
            $scope.offset = $scope.offset + 200;
            count = count - 200;
            $scope.userPhotos.push(data.response.items);
            return $scope.getActiveScan(count);
          }
        }, function(error) {
          return console.log(error);
        });
      }, 335);
    }
  };
  $scope.getArrayPhoto = function(array) {
    var temp;
    temp = [];
    angular.forEach(array, function(items) {
      return angular.forEach(items, function(item) {
        return temp.push(item);
      });
    });
    return temp;
  };
  $scope.getLikes = function(photos) {
    var tempPhotos;
    tempPhotos = '';
    if (photos.length < 25) {
      return $timeout(function() {
        return RestModel.getLikesExecute($scope.currentUser.id, photos, $scope.params, "photo").then(function(likes) {
          $scope.userLikes.push(likes.response);
          return $scope.isActiveFriends($scope.userLikes);
        }, function(error) {
          return console.log(error);
        });
      }, 300);
    } else {
      tempPhotos = photos.splice(0, 24);
      return $timeout(function() {
        return RestModel.getLikesExecute($scope.currentUser.id, tempPhotos, $scope.params, "photo").then(function(likes) {
          $scope.userLikes.push(likes.response);
          return $scope.getLikes(photos);
        }, function(error) {
          return console.log(error);
        });
      }, 300);
    }
  };
  $scope.isActiveFriends = function(likesArray) {
    var tempLikesArray;
    tempLikesArray = [];
    angular.forEach(likesArray, function(likes) {
      return angular.forEach(likes, function(like, key) {
        return angular.forEach(like.users, function(user) {
          return tempLikesArray.push(user);
        });
      });
    });
    angular.forEach(tempLikesArray, function(item) {
      if ($scope.arrayIdFriends[item]) {
        return $scope.arrayIdFriends[item].count = $scope.arrayIdFriends[item].count + 1;
      }
    });
    $scope.arrayIdFriends;
    angular.forEach($scope.arrayIdFriends, function(user) {
      return $scope.resultStatSecond.push(user);
    });
    $scope.resultStatSecond = $scope.resultStatSecond.sort($scope.sortableLikes);
    $scope.resultStatSecond = Loader.renderBand($scope.resultStatSecond);
    $scope.selectedStat = false;
    $scope.loading = false;
    $scope.firstStat = false;
    return $scope.secondStat = true;
  };
  $scope.sortableLikes = function(a, b) {
    return b.count - a.count;
  };
  return $scope.more = function(user) {
    return $state.transitionTo('user', {
      userId: user.id || user.uid
    });
  };
});

//# sourceMappingURL=StatisticsFriendsController.map
