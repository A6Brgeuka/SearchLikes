// Generated by CoffeeScript 1.7.1
'use strict';
UserFriendsModule.controller('UserFriendsController', function($scope, $location, $state, $timeout, $stateParams, RestModel, Loader, LocalStorage, params, currentUser) {
  var tempFriendsArray;
  $scope.stateParams = $stateParams;
  $scope.window = window;
  $scope.params = params;
  $scope.page = 1;
  $scope.pageSize = 6;
  $scope.userId = $scope.stateParams.userId;
  $scope.currentUser = currentUser;
  $scope.loading = true;
  $scope.resultUserFriends = false;
  tempFriendsArray = [];
  $scope.back = function() {
    return $scope.window.history.back();
  };
  $scope.home = function() {
    return $state.transitionTo('friends');
  };
  $scope.userFriendsArray = null;
  RestModel.getFriends(params, $scope.userId).then(function(data) {
    $scope.loading = false;
    $scope.countFriends = data.response.count;
    $scope.userFriends = RestModel.isWorkingFriendsObject(data);
    return $scope.userFriendsArray = null;
  }, function(error) {
    return console.log(error);
  });
  $scope.getListFriendsOnlineOrDelete = function(type) {
    $scope.userFriendsArray = RestModel.friendsOnlineOrDelete(type, $scope.userFriends);
    return $scope.isResultUserStatistic = false;
  };
  $scope.getListFriends = function() {
    $scope.userFriendsArray = null;
    return $scope.isResultUserStatistic = false;
  };
  $scope.more = function(user) {
    LocalStorage.setItem('last', user.last_seen);
    return $state.transitionTo('user', {
      userId: user.id || user.uid
    });
  };
  $scope.getStatisticAboutUserFriends = function() {
    var statisticFriends;
    if (!$scope.resultUserFriends) {
      $scope.resultUserFriends = [];
      statisticFriends = RestModel.friendsOnlineOrDelete(null, $scope.userFriends);
      $scope.getListCountFriends(statisticFriends);
      return $scope.loading = true;
    } else {
      $scope.isResultUserStatistic = true;
      return $scope.userFriendsArray = null;
    }
  };
  $scope.getListCountFriends = function(friends) {
    if (friends.length > 25) {
      tempFriendsArray = friends.splice(0, 25);
      return $timeout(function() {
        return RestModel.getAllCountFriends(tempFriendsArray, $scope.params).then(function(data) {
          angular.forEach(data.response, function(user) {
            return $scope.resultUserFriends.push(user[0]);
          });
          return $scope.getListCountFriends(friends);
        }, function(error) {
          return console.log(error);
        });
      }, 330);
    } else {
      if (friends.length !== 0) {
        return $timeout(function() {
          return RestModel.getAllCountFriends(friends, $scope.params).then(function(data) {
            angular.forEach(data.response, function(user) {
              return $scope.resultUserFriends.push(user[0]);
            });
            $scope.loading = false;
            $scope.openTable = false;
            $scope.openTableOnline = false;
            $scope.isResultUserStatistic = true;
            $scope.resultUserFriends = $scope.resultUserFriends.sort($scope.sortable);
            return $scope.resultUserFriends = Loader.renderBand($scope.resultUserFriends);
          });
        }, 330);
      } else {
        return console.log('dct');
      }
    }
  };
  return $scope.sortable = function(a, b) {
    return b.counters.friends - a.counters.friends;
  };
});

//# sourceMappingURL=UserFriendsController.map
